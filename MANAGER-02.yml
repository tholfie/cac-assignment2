Parameters:
  Key:
    Description: The key that is used for connecting to an instance with SSH
    Type: String
    Default: Assessment1key

Resources:
    InstanceSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: EC2Docker
        VpcId: !ImportValue Base01:VPC
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 2377
            ToPort: 2377
            CidrIp: 0.0.0.0/0
        SecurityGroupEgress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 2049
            ToPort: 2049
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 2377
            ToPort: 2377
            CidrIp: 0.0.0.0/0

    DockerImagePushInstanceProfile:
      Type: AWS::IAM::InstanceProfile
      Properties:
        Path: "/"
        Roles:
          - !Ref DockerImagePushRole

    DockerImagePushPolicy:
      Type: AWS::IAM::Policy
      Properties:
        PolicyName: DockerImagePush01
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - 'ecr:BatchCheckLayerAvailability'
                - 'ecr:GetDownloadUrlForLayer'
                - 'ecr:GetRepositoryPolicy'
                - 'ecr:DescribeRepositories'
                - 'ecr:ListImages'
                - 'ecr:PutImages'
                - 'ecr:DescribeImages'
                - 'ecr:BatchGetImage'
                - 'ecr:GetAuthorizationToken'
                - "ecr:InitiateLayerUpload"
                - "ecr:UploadLayerPart"
                - "ecr:CompleteLayerUpload"
              Resource: '*'
        Roles:
          - !Ref DockerImagePushRole

    DockerImagePushRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Principal:
                Service:
                - ec2.amazonaws.com
              Action:
                - 'sts:AssumeRole'
        Path: /

    BroadBuildServer01:
        Type: AWS::EC2::Instance
        Properties:
          ImageId: ami-032930428bf1abbff
          InstanceType: t2.micro
          SubnetId: !ImportValue Base01:PublicSubnet01:us-east-1a
          IamInstanceProfile: !Ref DockerImagePushInstanceProfile
          SecurityGroupIds: [ !Ref InstanceSecurityGroup ]
          UserData:
            Fn::Base64: !Sub
              - |
                #!/bin/bash
                sudo -i
                yum -y update
                yum -y install git
                yum -y install docker
                mkdir /usr/share/docker-storage
                chown ec2-user:ec2-user /usr/share/docker-storage
                chmod ugo+rw /usr/share/docker-storage
                mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 ${EFSID}.efs.us-east-1.amazonaws.com:/ /usr/share/docker-storage
                service docker start
                docker swarm init
                cd /usr/share/docker-storage
                docker swarm join-token -q worker > worker-join-token.txt
                ls | aws ecr get-login --no-include-email --region us-east-1 | xargs -L 1 xargs -t
                mkdir /usr/share/containers
                cd /usr/share/containers
                git clone https://github.com/looking4ward/nhs-cac-docker-dotnetwebapp.git
                cd nhs-cac-docker-dotnetwebapp
                docker build -t form:latest .
                cd ../
                git clone https://github.com/broadinstitute/covid19-testing.git
                cd covid19-testing
                cat > Dockerfile <<EOF
                FROM httpd:2.4
                COPY ./* /usr/local/apache2/htdocs/
                EOF
                docker build -t dashboard:latest .
                docker tag dashboard ${ECRDashboardID}
                docker tag form ${ECRFormID}
                docker push ${ECRFormID}
                docker push ${ECRDashboardID}
                cd /
                mkdir /compose
                cd /compose
                cat > docker-compose.yml <<EOF
                version: "3.8"
                services:
                  dashboard:
                    image: ${ECRDashboardID}
                    deploy:
                      mode: global
                    ports:
                      - "80:80"
                  form:
                    image: ${ECRFormID}
                    deploy:
                      mode: global
                    ports:
                      - "8080:80"
                EOF
                docker stack deploy -c docker-compose.yml deploy
              - EFSID: !ImportValue SharedEFS01:EFSID
                ECRDashboardID: !ImportValue ECR-02:ECRDashboardID
                ECRFormID: !ImportValue ECR-02:ECRFormID
          KeyName: !Ref Key

Outputs:
  IAMRoleRef:
      Description: IAM Role
      Value: !Ref DockerImagePushRole
      Export:
        Name: !Join [ ":", [ !Ref "AWS::StackName", IAMRole ] ]
  IAMInstanceProfile:
    Description: IAM Profile
    Value: !Ref DockerImagePushInstanceProfile
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", PushProfile ] ]
  ManagerIP:
    Description: Docker manager private IP
    Value: !GetAtt BroadBuildServer01.PrivateIp
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", ManagerIp ] ]