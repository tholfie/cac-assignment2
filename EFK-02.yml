Description: Creates an elasticsearch cluster in a private subnet, kibana in public subnet and appropriate personal firewall for the kibana instance. Also creates a small logging instance to get ec2 and cloudwatch information from AWS.

#--------------------------------------------------------------------------------------------------------------------------------------------------------------------
#The parameters are important. they grant access for the metricbeat to connect to cloudwatch, ssh access and use or wipe the EBS
#--------------------------------------------------------------------------------------------------------------------------------------------------------------------
Parameters:
  Key:
    Description: The key that is used for connecting to an instance with SSH
    Type: String
    Default: key02
  MyIP:
    Description: The IP for Personal access to Kibana (include /32)
    Type: String
    Default: 213.233.240.147/32
  StandardImage:
    Description: The AMI for the elastic and kibana instances (Amazon Linux 2 is default)
    Type: String
    Default: ami-0947d2ba12ee1ff75
  AWSAccessKeyId:
    Description: The Access Key ID of the current session (Vocaerium)
    Type: String
    NoEcho: true
  AWSSecretKey:
    Description: The Secret Key of the current session (Vocaerium)
    Type: String
    NoEcho: true
  AWSSessionToken:
    Description: The Session Token of the current session (Vocaerium)
    Type: String
    NoEcho: true
  CreateNewEmptyFileSystem:
    Description: If true is specified, will create or format the current filesystem. If false is specified, will use previously created EBS storage (if it exists).
    Default: yes
    Type: String
    AllowedValues:
      - yes
      - no
    ConstraintDescription: Choose true or false.

#--------------------------------------------------------------------------------------------------------------------------------------------------------------------
#makes the condition "FSCreated" True or false regarding what was picked in CreateNewEmptyFileSystem. this will activate a variable in the Cloudwatchlogger Metadata
#--------------------------------------------------------------------------------------------------------------------------------------------------------------------
Conditions:
  FSCreated: !Equals [ !Ref CreateNewEmptyFileSystem, "true" ]

#--------------------------------------------------------------------------------------------------------------------------------------------------------------------
#Creates alle necessary security groups for the instances
#--------------------------------------------------------------------------------------------------------------------------------------------------------------------
Resources:
  ElasticsearchSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group the elasticsearch node
      VpcId: !ImportValue Base01:VPC
      Tags:
        - Key: Name
          Value: ElasticsearchSecurityGroup
        - Key: Module
          Value: Automation
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !ImportValue Base01:PublicSubnet01CIDR
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !ImportValue Base01:PublicSubnet02CIDR
        - IpProtocol: tcp
          FromPort: 9200
          ToPort: 9200
          CidrIp: !ImportValue Base01:VPCCIDR
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  KibanaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group the elasticsearch node
      VpcId: !ImportValue Base01:VPC
      Tags:
        - Key: Name
          Value: KibanaSecurityGroup
        - Key: Module
          Value: Automation
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5601
          ToPort: 5601
          CidrIp: !Ref MyIP
        - IpProtocol: tcp
          FromPort: 5601
          ToPort: 5601
          CidrIp: !ImportValue Base01:PrivateSubnet01CIDR
        - IpProtocol: tcp
          FromPort: 5601
          ToPort: 5601
          CidrIp: !ImportValue Base01:PrivateSubnet02CIDR
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 10.0.0.0/16
        - IpProtocol: tcp
          FromPort: 9200
          ToPort: 9200
          CidrIp: !ImportValue Base01:PrivateSubnet01CIDR
        - IpProtocol: tcp
          FromPort: 9200
          ToPort: 9200
          CidrIp: !ImportValue Base01:PrivateSubnet02CIDR

  CloudWatchLoggerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the instance that sends cloudwatch data to elasticsearch
      VpcId: !ImportValue Base01:VPC
      Tags:
        - Key: Name
          Value: CloudWatchLoggerSecurityGroup
        - Key: Module
          Value: Automation
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5601
          ToPort: 5601
          CidrIp: !ImportValue Base01:PublicSubnet01CIDR
        - IpProtocol: tcp
          FromPort: 5601
          ToPort: 5601
          CidrIp: !ImportValue Base01:PublicSubnet02CIDR
        - IpProtocol: tcp
          FromPort: 9200
          ToPort: 9200
          CidrIp: !ImportValue Base01:PrivateSubnet01CIDR
        - IpProtocol: tcp
          FromPort: 9200
          ToPort: 9200
          CidrIp: !ImportValue Base01:PrivateSubnet02CIDR

#--------------------------------------------------------------------------------------------------------------------------------------------------------------------
#Creates an Elastic Instance that functions as the central monitoring processor and storage.
#--------------------------------------------------------------------------------------------------------------------------------------------------------------------
  Elastic01:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref StandardImage
      InstanceType: t2.medium
      KeyName: !Ref Key
      Tags:
        - Key: Name
          Value: Elastic01
        - Key: Module
          Value: Automation
      NetworkInterfaces:
        - AssociatePublicIpAddress: false
          DeviceIndex: "0"
          GroupSet: [ !Ref ElasticsearchSecurityGroup ]
          SubnetId: !ImportValue Base01:PrivateSubnet02:us-east-1b
      UserData:
        Fn::Base64: !Sub
          - |
            #!/bin/bash
            sudo -i
            ${MakeNewFS}
            mkdir /var/lib/elasticsearch
            mount /dev/xvdh /var/lib/elasticsearch/
            chmod ugo+rw /dev/xvdh
            chmod ugo+rw /var/lib/elasticsearch
            yum -y update
            cd /etc/yum.repos.d/
            rpm --import https://artifacts.elastic.co/GPG-KEY-elasticsearch
            cat > elasticsearch.repo <<EOF
            [elasticsearch]
            name=Elasticsearch repository for 7.x packages
            baseurl=https://artifacts.elastic.co/packages/7.x/yum
            gpgcheck=1
            gpgkey=https://artifacts.elastic.co/GPG-KEY-elasticsearch
            enabled=0
            autorefresh=1
            type=rpm-md
            EOF
            yum -y install --enablerepo=elasticsearch elasticsearch
            cd /etc/elasticsearch/
            sed -i 's/#network.host: 192.168.0.1/network.host: 0.0.0.0/g' elasticsearch.yml
            sed -i 's/#http.port: 9200/http.port: 9200/g' elasticsearch.yml
            sed -i 's/#node.name: node-1/node.name: monitoring01/g' elasticsearch.yml
            sed -i 's/#cluster.initial_master_nodes: \["node-1", "node-2"\]/cluster.initial_master_nodes: ["monitoring01"]/g' elasticsearch.yml
            sed -i 's/#cluster.name: my-application/cluster.name: covid-dashboard-vpc-logging/g' elasticsearch.yml
            systemctl daemon-reload
            systemctl enable elasticsearch
            systemctl start elasticsearch
          - MakeNewFS: !If [FSCreated, "mkfs -t xfs /dev/xvdh", "echo filesystem already created"]

#--------------------------------------------------------------------------------------------------------------------------------------------------------------------
#Is the Dashboard that shows the elasticsearch Data.
#--------------------------------------------------------------------------------------------------------------------------------------------------------------------
  Kibana01:
    Type: AWS::EC2::Instance
    DependsOn: Elastic01
    Properties:
      ImageId: !Ref StandardImage
      InstanceType: t2.large
      KeyName: !Ref Key
      Tags:
        - Key: Name
          Value: Kibana01
        - Key: Module
          Value: Automation
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: "0"
          GroupSet: [ !Ref KibanaSecurityGroup ]
          SubnetId: !ImportValue Base01:PublicSubnet02:us-east-1b
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            sudo -i
            yum -y update
            cd /etc/yum.repos.d/
            rpm --import https://artifacts.elastic.co/GPG-KEY-elasticsearch
            cat > kibana.repo <<EOF
            [kibana-7.x]
            name=Kibana repository for 7.x packages
            baseurl=https://artifacts.elastic.co/packages/7.x/yum
            gpgcheck=1
            gpgkey=https://artifacts.elastic.co/GPG-KEY-elasticsearch
            enabled=1
            autorefresh=1
            type=rpm-md
            EOF
            yum -y install kibana
            cd /etc/kibana/
            sed -i 's/#server.port: 5601/server.port: 5601/g' kibana.yml
            sed -i 's/#server.host: "localhost"/server.host: "0.0.0.0"/g' kibana.yml
            sed -i 's/#elasticsearch.hosts: ["http://localhost:9200"]/elasticsearch.hosts: ["http://${Elastic01.PrivateIp}:9200"]/g' kibana.yml
            sed -i 's/#elasticsearch.hosts: \["http:\/\/localhost:9200"\]/elasticsearch.hosts: ["http:\/\/${Elastic01.PrivateIp}:9200"]/g' kibana.yml
            systemctl daemon-reload
            systemctl enable kibana
            systemctl start kibana

#--------------------------------------------------------------------------------------------------------------------------------------------------------------------
#Collects metrics from cloudwatch
#--------------------------------------------------------------------------------------------------------------------------------------------------------------------
  CloudWatchLogger01:
    Type: AWS::EC2::Instance
    DependsOn: Elastic01
    Properties:
      ImageId: !Ref StandardImage
      InstanceType: t2.micro
      KeyName: !Ref Key
      Tags:
        - Key: Name
          Value: CloudWatchLogger01
        - Key: Module
          Value: Automation
      NetworkInterfaces:
        - AssociatePublicIpAddress: false
          DeviceIndex: "0"
          GroupSet: [ !Ref CloudWatchLoggerSecurityGroup ]
          SubnetId: !ImportValue Base01:PrivateSubnet02:us-east-1b
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            sudo -i
            yum -y update
            cd /etc/yum.repos.d/
            sudo rpm --import https://packages.elastic.co/GPG-KEY-elasticsearch
            cat > elastic.repo <<EOF
            [elastic-7.x]
            name=Elastic repository for 7.x packages
            baseurl=https://artifacts.elastic.co/packages/7.x/yum
            gpgcheck=1
            gpgkey=https://artifacts.elastic.co/GPG-KEY-elasticsearch
            enabled=1
            autorefresh=1
            type=rpm-md
            EOF
            yum -y install metricbeat
            metricbeat modules disable system
            cd /etc/metricbeat/
            sed -i 's/#host: "localhost:5601"/host: "${Kibana01.PrivateIp}:5601"/g' metricbeat.yml
            sed -i 's/hosts: \["localhost:9200"\]/  hosts: ["${Elastic01.PrivateIp}:9200"]/g' metricbeat.yml
            cd /etc/metricbeat/modules.d/
            cat > aws.yml <<EOF
            - module: aws
              period: 5m
              metricsets:
                - cloudwatch
              metrics:
                - namespace: AWS/EC2
                  name: ["CPUUtilization", "DiskWriteOps"]
                  resource_type: ec2:instance
                  dimensions:
                    - name: InstanceId
                      value: i-1234
                  statistic: ["Average", "Maximum", "NetworkIn", "NetworkOut"]
              regions:
                - us-east-1
              access_key_id: '${AWSAccessKeyId}'
              secret_access_key: '${AWSSecretKey}'
              session_token: '${AWSSessionToken}'
            - module: aws
              period: 5m
              metricsets:
                - ec2
              regions:
                - us-east-1
              access_key_id: '${AWSAccessKeyId}'
              secret_access_key: '${AWSSecretKey}'
              session_token: '${AWSSessionToken}'
            EOF
            systemctl enable metricbeat
            systemctl start metricbeat

#--------------------------------------------------------------------------------------------------------------------------------------------------------------------
#The EBS mount for elastic
#--------------------------------------------------------------------------------------------------------------------------------------------------------------------
  ElasticSearchVolumeMount:
    Type: AWS::EC2::VolumeAttachment
    Properties:
      InstanceId: !Ref Elastic01
      VolumeId: !ImportValue SharedEFS01:ElasticsearchVolume
      Device: /dev/sdh

#--------------------------------------------------------------------------------------------------------------------------------------------------------------------
#Outputs the ElasticIP and KibanaIP so that the public webservers can use them.
#--------------------------------------------------------------------------------------------------------------------------------------------------------------------
Outputs:
  ElasticSearchIP:
    Description: Reference to the IP of the elasticsearch instance
    Value: !GetAtt Elastic01.PrivateIp
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", ElasticSearchIP ] ]
  KibanaIP:
    Description: Reference to the IP of the kibana instance
    Value: !GetAtt Kibana01.PrivateIp
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", KibanaIP ] ]